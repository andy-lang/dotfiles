" Read vim plugins from file
source ~/.vim/plugins.vim

filetype plugin indent on

" stop that annoying glitch where vim deletes lines on entry
" set t_RV= ttymouse=xterm2

set shell=/bin/sh

""""""""""""""""""""
" Appearance
""""""""""""""""""""

" Spelling corrections
abbr abrr abbr
abbr fuction function
abbr juint junit
abbr hierarcy hierarchy
abbr pbulic public

" C-like indentation
set autoindent
set smartindent
set cindent

" options to hide sections of the GUI. Mostly for eclim shenanigans
set guioptions-=m
set guioptions-=T
set guioptions-=r

" highlight matching search patterns, start searching before pressing enter
set hlsearch
set incsearch

" case insensitive searching, unless an upper case char was specified
set ignorecase
set smartcase

" add line numbers
set number

"always a certain number of lines above/below current cursor position
set scrolloff=1

" ignore warnings if swapfile exists
set shortmess+=A

" 4 spaces per indent
set tabstop=4
set shiftwidth=4

" visual, bash-like autocomplete
set wildmenu
set wildmode=longest,full

" wrap long lines
set wrap linebreak

" syntax highlighting
syntax enable
" set t_Co=256
let base16colorspace=256
try
	" colorscheme Benokai
	" colorscheme jellybeans
	set background=dark
	colorscheme base16-monokai
catch
endtry

" set enc=utf8
set fillchars=vert:\â”‚,fold:-

set foldmethod=syntax
set foldnestmax=1
set nofoldenable


""""""""""""""""""""
" Functionality
""""""""""""""""""""
set spell spelllang=en_au

" automatically reloads files that have been detected as being changed
set autoread
" automatically write on :make, :next, etc
set autowrite

" backspace skips over indents, EOL, appends, etc
set backspace=2

" if no register specified, copy to system clipboard
set clipboard+=unnamedplus

" open make errors in new split/buffer if not open
set switchbuf=useopen,usetab,split

source ~/.vim/ignores.vim

set undofile
set undodir=${HOME}/.vim/undo


""""""""""""""""""""
" Keybindings & commands
""""""""""""""""""""
let mapleader=","

" Esc to turn off search highlighting
" nnoremap <Esc> :noh<CR>

" gr for previous tab
map gr gT
" gb for bottom of file
map gb G
" gs to swap two adjacent characters
" map gs xph
" 0 jumps to first non-blank character, instead of hard BOL
map 0 ^
" j and k for soft line movement
nmap j gj
nmap k gk
vmap j gj
vmap k gk

if !exists(':TmuxNavigateRight')
	" tmux navigation will provide the pane navigation, so only map these if tmux isn't in use
	nnoremap <C-H> <C-w>h
	nnoremap <C-J> <C-w>j
	nnoremap <C-K> <C-w>k
	nnoremap <C-L> <C-w>l
endif

" make with ,m ; make clean with ,cm
nnoremap <Leader>m :Make <CR>
nnoremap <Leader>cm :Make clean<CR>
" autocmd BufWritePost * Neomake

" K performs the reverse of J - i.e. split the line at the current cursor location
nnoremap K i<Enter><Esc>k$

" Y works similarly to C, D, etc
nnoremap Y y$

" shortcuts to edit rc files
nnoremap <Leader>ev :e $MYVIMRC<CR>
nnoremap <Leader>ez :e ~/.zshrc<CR>
" " ,es to edit UltiSnips file
nnoremap <Leader>es :call GetSnipFile()<CR>

" W and Q work as w and q do.
" Who do? Q do
command! Q :q
command! W :w

" turn off fucking ex mode
nnoremap Q <nop>
" similar for q:
nnoremap q: <nop>
nnoremap q? <nop>
nnoremap q/ <nop>

" buffer delete does not delete window
command! Bd bp|bd #
nnoremap <Leader>d :Bd<CR>

""""""""""""""""""""
" Autocommands
""""""""""""""""""""

" reload vimrc on save
autocmd! BufWritePost ~/.vimrc,$MYVIMRC,~/.vim/plugins.vim source $MYVIMRC
"autocmd! BufWritePost ~/.nvimrc source %

" do similar if saving .tmux.conf
autocmd! BufWritePost ~/.tmux.conf :call VimuxRunCommand("tmux source-file ~/.tmux.conf")

" and similar for .zshrc
autocmd! BufWritePost ~/.zshrc,*.zsh-theme,$DOTFILES/zsh/*.zsh :call VimuxRunCommand("source ~/.zshrc")

" and bashrc, bash aliases
autocmd! BufWritePost ~/.bashrc :call VimuxRunCommand("source ~/.bashrc")
autocmd! BufWritePost ~/.bash_aliases :call VimuxRunCommand("source ~/.bash_aliases")

" syntax highlighting for snippet files
autocmd! FileType snippet set syntax=snippets
autocmd! BufRead,BufNewFile *.snippets set filetype=snippets
" special settings for editing crontab files
autocmd! BufNewFile,BufRead crontab.* set nobackup | set nowritebackup
" tab settings for editing makefiles
autocmd! FileType make set ts=8 sts=8 sw=8 noexpandtab
" Python - autocapitalise booleans
autocmd! FileType python :iabbrev <buffer> true True| :iabbrev <buffer> false False
" Ruby - capitalise = capitalize
autocmd! FileType ruby :iabbrev <buffer> capitalise capitalize
" Markdown - syntax highlighting
autocmd! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
" zsh - highlight theme files
autocmd! BufRead,BufNewFile *.zsh-theme set filetype=zsh

" Extra Fortran settings for syntactic goodness
let fortran_free_source=1
let fortran_do_enddo=1

" Java
let java_highlight_java_lang_ids=1

" LaTeX settings
let g:tex_flavor='latex'
let g:tex_nospell=0
" autocmd BufNewFile,BufFilePre,BufRead *.tex setlocal makeprg=latexmk\ %\ -pdf\ -pdflatex=\"pdflatex\ -interaction\ nonstopmode\"
" autocmd FileType tex let b:Dispatch = 'texfot latexmk -pdf -pvc %'

" Rust
autocmd filetype rust setlocal makeprg=cargo\ build

" spellcheck for txt files
" autocmd! FileType help setlocal nospell

""""""""""""""""""""
" Plugin-specific settings
""""""""""""""""""""

""" vim-airline

" always show statusline
set laststatus=2

let g:airline_powerline_fonts = 1
let g:airline_theme = 'hybrid'
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#bufferline#overwrite_variables = 1
let g:airline#extensions#tmuxline#enabled = 1
let g:tmuxline_preset = {
	\'a':       '#I|#P',
	\'win':     '#I #W',
	\'cwin':    '#I #W',
	\'x':       '#(python3 ~/.tmux/scripts/MediaPlayerStatus/MediaPlayerStatus.py)',
	\'y':       '%R',
	\'z':       '#(echo $USER)',
	\'options': {'status-justify' : 'left'}}
let g:airline#extensions#tmuxline#snapshot_file = "~/.tmux/themes/vim-tmuxline.conf"
let g:airline#extensions#whitespace#enabled = 0

" b: basename of current working directory
let g:airline_section_b = '%{fnamemodify(getcwd(), '':t'')}'
" y: linecount
let g:airline_section_y = '%L'
" z: current line, current column
let g:airline_section_z = '%l,%v'
let g:bufferline_echo = 0

" camelcasemotion
map <silent> <Leader>w <Plug>CamelCaseMotion_w
map <silent> <Leader>b <Plug>CamelCaseMotion_b
map <silent> <Leader>e <Plug>CamelCaseMotion_e
map <silent> <Leader>ge <Plug>CamelCaseMotion_ge

""" vim-commentary
autocmd! FileType c,cpp setlocal commentstring=\/\/\ %s
autocmd! FileType cmake setlocal commentstring=#\ %s
autocmd! FileType octave setlocal commentstring=%\ %s

""" vim-easy-align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
let g:easy_align_ignore_groups = []

""" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

""" DelimitMate
let delimitMate_expand_cr=1
au FileType python let b:delimitMate_nesting_quotes = ['"']

""" FZF
map <silent> <Leader>f :FZF -m<CR>
map <silent> <Leader>hf :FZF -m ~<CR>

""""""""""""""""""""
" Functions
""""""""""""""""""""
fu! GetSnipFile()
	execute 'edit ~/.vim/UltiSnips/' . &ft . '.snippets'
endfunction
